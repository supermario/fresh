#!/bin/bash

function title_pass () {
  echo "${COLOUR_PASS}"
  echo "-------------------------------------------"
  echo " ${1}"
  echo "-------------------------------------------"
  echo "${COLOUR_RESET}"
}

function title_info () {
  echo "${COLOUR_INFO}"
  echo "-------------------------------------------"
  echo " ${1}"
  echo "-------------------------------------------"
  echo "${COLOUR_RESET}"
}

function title_warn () {
  echo "${COLOUR_WARN}"
  echo "-------------------------------------------"
  echo " ${1}"
  echo "-------------------------------------------"
  echo "${COLOUR_RESET}"
}

function title_error () {
  echo "${COLOUR_ERROR}"
  echo "-------------------------------------------"
  echo " ${1}"
  echo "-------------------------------------------"
  echo "${COLOUR_RESET}"
  exit
}

# Success logging
e_success() {
  printf "${COLOUR_PASS}✓${COLOUR_RESET} %s\n" "$@"
}

# Error logging
e_error() {
  printf "${COLOUR_ERROR}x${COLOUR_RESET} %s\n" "$@"
}

# Warning logging
e_warning() {
  printf "${COLOUR_WARN}!${COLOUR_RESET} %s\n" "$@"
}

# Ask for confirmation before proceeding
seek_confirmation() {
  printf "\n"
  read -p "$@ (y/n) " -n 1
  printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    return 0
  fi
  return 1
}

# Test whether we're in a git repo
is_git_repo() {
  $(git rev-parse --is-inside-work-tree &> /dev/null)
}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
  if [ $(type -P $1) ]; then
    return 0
  fi
  return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
  if $(brew list $1 >/dev/null); then
    e_success "$1 already installed"
    return 0
  fi
  e_warning "Missing formula: $1"
  return 1
}

tap_exists() {
  if $(brew tap | grep "$1" >/dev/null 2>&1); then
    e_success "$1 already installed"
    return 0
  fi
  e_warning "Missing tap: $1"
  return 1
}

cask_exists() {
  if $(brew cask list $1 >/dev/null); then
    e_success "$1 already installed"
    return 0
  fi
  e_warning "Missing cask: $1"
  return 1
}

logout() {
  osascript -e 'tell application "System Events" to log out'
}

# columnize.sh credit: https://github.com/Arko/Columnize
# Take a list of values and output them in a nicely formatted column view.
# Author: Loïc Cattani "Arko" <loic cattani at gmail com>

columnize() {
values=($*)
longest_value=0

# Find the longest value
for value in ${values[@]}
do
  if [[ ${#value} -gt $longest_value ]]; then
    longest_value=${#value}
  fi
done

# Compute column span
term_width=$(tput cols)
(( columns = $term_width / ($longest_value + 2) ))

# Print values with pretty column width
curr_col=0
for value in ${values[@]}
do
  value_len=${#value}
  echo -n $value
  (( spaces_missing = $longest_value - $value_len + 2 ))
  printf "%*s" $spaces_missing
  (( curr_col++ ))
  if [[ $curr_col == $columns ]]; then
    echo
    curr_col=0
  fi
done

# Make sure there is a newline at the end
if [[ $curr_col != 0 ]]; then
  echo
fi
}
